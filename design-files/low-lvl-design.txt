Low Level Design for Quiz Applet

current classes
title: class on title
first-load-title: class on title when it is first loaded to center it on css, toggled off on quiz start
quiz-title: class on title that is toggled on after quiz is initiated to make it nav bar

container: class on section that holds the quiz questions, the start button, and retake button

js-object-display: class on div contained within the container that will allow replaceWith() function to be called on it and replace it with quiz question or retake button

start-button: class on div within js-object display that styles the start button at the beginning of the quiz

Home Screen Implementation
	title  first load has distinct class to make it quite big and centered on page. This is contained within a section.
	start button is located within a div that is within a container.The container itself will be a permanent part of the page. The div will be the one jquery calls on to replace each time we rerender the page. The div with class js-object-dispaly will be replaced by the render functiont as the quiz moves forth i.e. that is replaced with rendered object once it is button is clicked either start, next question, or retake
	title classes are then toggled to essentially be a nav bar and remove original class to be displayed throughout the quiz

	on load title is contained with a section with classes title, first-load-title
	a seperate section is created that has class container which will hold the start button plus questions object and finally end screen, this will be the container that will have the div with class js-object-display that has the replaceWith() function appended to it in all the render functions. http://api.jquery.com/replaceWith/

	<section class = "title"><div class = "title first-load-title>BeerFest Quiz Test</div></section>
	<section class ="container"><div class = "js-object-display start-button">Start Quiz</div></section>
	


JS

will be split into four distinct sections - state, state modification, dom modification - render, and event modification.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
STATE

state will hold my state variable which will be an empty array, my html template for my questions, and my homepage and button template for before and after the quiz.

variable for question object - question, answer, answers //answer choices

variable for start and retake quiz - empty html while pushing passing an argument in the function. The html will read something like "<div class=\"initiate quiz\"></div>".

variable counter = 0; //This counter ensures the index is properly transversed. MUST REMEMBER TO RESET COUNTER TO 0 ONCE RETAKE BUTTON IS PRESSED - otherwise quiz will break
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
STATE MANAGEMENT

state modification will hold a function that alters the question template locally and pushes it to state. function will have at least two arguements (state, question-template)
	this should satisfy the ability to create each individual question. it will require a for loop that pushes each question one time.

a function that alters the before/after template locally and pushes it to state. will hold at least two arguments (state, before-after-template).
	-this will require me to empty the div before appending the next object index to it.

var createQuestion = function(state, question-template)
	NEED TO RESEARCH HOW TO INITIATE FOR LOOP ONCE PER EVENT - perhaps have counter as a global variable that is incremeneted one time each time the function is called in the event listener section.
	-answer: have global variable that increments each time a function that renders a question is called and set that variable as the index for the question object. 
	-next problem: how to display questions on html. perhaps - have a function that statically calls each option. perhaps create an object within an object to have keys that I call rather than index, though that might make it more complicated.
	Options:
	---->	1. answers: ["A. yadda", "B. yadda", "C. yadda", "D. yadda"]
		2. answers:{A: "yadda",
			    B: "yadda",
			    C: "yadda",
			    D: "yadda",
	I do not think there are any advantages to using an object in this instance over an array. The array has the advantage of providing the letter for the multiple choice easily when displayed in the DOM. I'll go with option one and write a function that returns a variable with four lines of code that calls each answers index statically as the only thing that will change isn't the answers index but the questions index.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Dom modification

this section will hold a function that ultimately renders the state into the dom. As such it will require a function that takes at least two arguments (state, class). Class will be the class name of the variable that I intend to replace.

Create button function - 
	var createButton = function(item, itemTemplate){
		var element = $(itemTemplate);
		element.find(CREATE DISTINCT CLASS IN VAR TEMPLATE TO CALL ON).txt(item);
	return element;
	}

create next question
	var question= function(object, itemTemplate){
		var element = $(itemTemplate);
		element.find(AGAIN CREATE DISTINCT CLASS PER QUESTION LINE - each class should have a similar name but a number or letter incremented. such as "js-question-A", "js-question-B").txt(questions.answers[0]);//repeat 4 times (inclusive) with the rest of the answer choices
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event listeners

this section will hold functions that listen for the events happening in the page. The start quiz button, the MC selection, the next question button, and the start quiz over button. It is likely that I will be able to combine the function for the start quiz and start quiz over as one function. So I will have at least three functions.
